{"ast":null,"code":"#!/usr/bin/env node\n\n/**\n * Simple\n *\n * @package simple\n * @author Andrew Sliwinski <andrew@diy.org>\n */\n\n/**\n * Dependencies\n */\n\nvar fs = require('fs'),\n    http = require('http'),\n    path = require('path'),\n    url = require('url'),\n    command = require('commander'),\n    mime = require('mime');\n/**\n * Process arguments\n */\n\n\ncommand.version('0.1.0').option('-p, --port [port]', 'Server port [8000]', 8000).option('-h, --host [host]', 'Hostname [127.0.0.1]', '127.0.0.1').option('-d, --default [filename]', 'Default index [index.html]', 'index.html').option('-s, --silent', 'Silent mode').parse(process.argv);\n/**\n * Logger\n */\n\nvar log = function (req, uri, code) {\n  if (!command.silent) {\n    var client = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    var stamp = '[' + new Date().toUTCString() + ']';\n    var request = '\"' + req.method + ' ' + uri + ' HTTP/1.1\" ' + code;\n    console.log(client + ' - - ' + stamp + ' ' + request + ' -');\n  }\n};\n/**\n * HTTP server\n */\n\n\nhttp.createServer(function (req, res) {\n  // Request URI\n  var uri = url.parse(req.url).pathname; // Default index\n\n  if (uri === '/') {\n    uri = command.default;\n  } // Path relative to process\n\n\n  var filename = path.join(process.cwd(), uri); // Check for file existence\n\n  path.exists(filename, function (exists) {\n    // 404\n    if (!exists) {\n      res.writeHead(404, {\n        'Content-Type': 'text/plain'\n      });\n      res.write('404 Not Found\\n');\n      res.end();\n      log(req, uri, 404);\n      return;\n    } // 200\n\n\n    res.writeHead(200, {\n      'Content-Type': mime.lookup(filename)\n    });\n    fs.createReadStream(filename).pipe(res);\n    log(req, uri, 200);\n  });\n}).listen(command.port, command.host);\n/**\n * Listening\n */\n\nconsole.log('Serving HTTP on ' + command.host + ' port ' + command.port + ' ...');","map":{"version":3,"sources":["C:/Users/kaust/OneDrive/Desktop/domingo/client/node_modules/simple/bin/index.js"],"names":["fs","require","http","path","url","command","mime","version","option","parse","process","argv","log","req","uri","code","silent","client","headers","connection","remoteAddress","stamp","Date","toUTCString","request","method","console","createServer","res","pathname","default","filename","join","cwd","exists","writeHead","write","end","lookup","createReadStream","pipe","listen","port","host"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Simple\n *\n * @package simple\n * @author Andrew Sliwinski <andrew@diy.org>\n */\n\n/**\n * Dependencies\n */\nvar fs      = require('fs'),\n    http    = require('http'),\n    path    = require('path'),\n    url     = require('url'),\n    command = require('commander'),\n    mime    = require('mime');\n\n/**\n * Process arguments\n */\ncommand\n    .version('0.1.0')\n    .option('-p, --port [port]', 'Server port [8000]', 8000)\n    .option('-h, --host [host]', 'Hostname [127.0.0.1]', '127.0.0.1')\n    .option('-d, --default [filename]', 'Default index [index.html]', 'index.html')\n    .option('-s, --silent', 'Silent mode')\n    .parse(process.argv);\n\n/**\n * Logger\n */\nvar log = function (req, uri, code) {\n    if (!command.silent) {\n        var client  = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n        var stamp   = '[' + new Date().toUTCString() + ']';\n        var request = '\"' + req.method + ' ' + uri + ' HTTP/1.1\" ' + code;\n        console.log(client + ' - - ' + stamp + ' ' + request + ' -');\n    }\n};\n\n/**\n * HTTP server\n */\nhttp.createServer(function (req, res) {\n    // Request URI\n    var uri         = url.parse(req.url).pathname;\n\n    // Default index\n    if (uri === '/') {\n        uri = command.default;\n    }\n    \n    // Path relative to process\n    var filename    = path.join(process.cwd(), uri);\n\n    // Check for file existence\n    path.exists(filename, function(exists) {\n        \n        // 404\n        if (!exists) {\n            res.writeHead(404, {'Content-Type': 'text/plain'});\n            res.write('404 Not Found\\n');\n            res.end();\n            log(req, uri, 404);\n            return;\n        }\n\n        // 200\n        res.writeHead(200, {'Content-Type': mime.lookup(filename)});\n        fs.createReadStream(filename).pipe(res);\n        log(req, uri, 200);\n    });\n}).listen(command.port, command.host);\n\n/**\n * Listening\n */\nconsole.log('Serving HTTP on ' + command.host + ' port ' + command.port + ' ...');\n"]},"metadata":{},"sourceType":"script"}